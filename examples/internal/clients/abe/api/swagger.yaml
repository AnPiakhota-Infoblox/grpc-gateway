openapi: 3.0.1
info:
  title: A Bit of Everything
  contact:
    name: gRPC-Gateway project
    url: https://github.com/grpc-ecosystem/grpc-gateway
    email: none@example.com
  license:
    name: BSD 3-Clause License
    url: https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt
  version: "1.0"
  x-something-something: yadda
externalDocs:
  description: More about gRPC-Gateway
  url: https://github.com/grpc-ecosystem/grpc-gateway
servers:
- url: /
security:
- ApiKeyAuth: []
  BasicAuth: []
- ApiKeyAuth: []
  OAuth2:
  - read
  - write
tags:
- name: ABitOfEverythingService
  description: ABitOfEverythingService description -- which should not be used in
    place of the documentation comment!
  externalDocs:
    description: Find out more about EchoService
    url: https://github.com/grpc-ecosystem/grpc-gateway
- name: camelCaseServiceName
- name: AnotherServiceWithNoBindings
paths:
  /v1/example/a_bit_of_everything:
    post:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_CreateBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/examplepbABitOfEverything'
          application/x-foo-mime:
            schema:
              $ref: '#/components/schemas/examplepbABitOfEverything'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v1/example/a_bit_of_everything/echo/{value}:
    get:
      tags:
      - echo rpc
      summary: "Summary: Echo rpc"
      description: Description Echo
      externalDocs:
        description: Find out more Echo
        url: https://github.com/grpc-ecosystem/grpc-gateway
      operationId: echo rpcABitOfEverythingService_Echo
      parameters:
      - name: value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subStringMessage'
              example:
                value: the input value
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/subStringMessage'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: integer
                format: integer
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: integer
                format: integer
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        "503":
          description: Returned when the resource is temporarily unavailable.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
          x-number: 100
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
  /v1/example/a_bit_of_everything/params/get/nested_enum/{singleNested.ok}:
    get:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_CheckNestedEnumGetQueryParams
      parameters:
      - name: singleNested.ok
        in: path
        description: DeepEnum description.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - "FALSE"
          - "TRUE"
      - name: singleNested.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: singleNested.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: uuid
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: floatValue
        in: query
        description: Float value field
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: int64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: stringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: bytesValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: byte
      - name: uint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: enumValue
        in: query
        description: " - ZERO: ZERO means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ZERO
          enum:
          - ZERO
          - ONE
      - name: pathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ABC
          enum:
          - ABC
          - DEF
      - name: nestedPathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: GHI
          enum:
          - GHI
          - JKL
      - name: sfixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: repeatedStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: oneofString
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nonConventionalNameValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: timestampValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: repeatedEnumValue
        in: query
        description: "repeated enum value. it is comma-separated in query.\n\n - ZERO:\
          \ ZERO means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedEnumAnnotation
        in: query
        description: "Repeated numeric enum title. Repeated numeric enum description.\n\
          \n - ZERO: ZERO means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: enumValueAnnotation
        in: query
        description: "Numeric enum title. Numeric enum description.\n\n - ZERO: ZERO\
          \ means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ZERO
          enum:
          - ZERO
          - ONE
      - name: repeatedStringAnnotation
        in: query
        description: Repeated string title. Repeated string description.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: nestedAnnotation.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nestedAnnotation.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: int64OverrideType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: requiredStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as required in Open API definition.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: outputOnlyStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as readonly in Open API definition.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: optionalStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
  /v1/example/a_bit_of_everything/params/get/{singleNested.name}:
    get:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_CheckGetQueryParams
      parameters:
      - name: singleNested.name
        in: path
        description: name is nested field.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: singleNested.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: singleNested.ok
        in: query
        description: "DeepEnum description.\n\n - FALSE: FALSE is false.\n - TRUE:\
          \ TRUE is true."
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "FALSE"
          enum:
          - "FALSE"
          - "TRUE"
      - name: uuid
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: floatValue
        in: query
        description: Float value field
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: int64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: stringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: bytesValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: byte
      - name: uint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: enumValue
        in: query
        description: " - ZERO: ZERO means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ZERO
          enum:
          - ZERO
          - ONE
      - name: pathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ABC
          enum:
          - ABC
          - DEF
      - name: nestedPathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: GHI
          enum:
          - GHI
          - JKL
      - name: sfixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: repeatedStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: oneofString
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nonConventionalNameValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: timestampValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: repeatedEnumValue
        in: query
        description: "repeated enum value. it is comma-separated in query.\n\n - ZERO:\
          \ ZERO means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedEnumAnnotation
        in: query
        description: "Repeated numeric enum title. Repeated numeric enum description.\n\
          \n - ZERO: ZERO means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: enumValueAnnotation
        in: query
        description: "Numeric enum title. Numeric enum description.\n\n - ZERO: ZERO\
          \ means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ZERO
          enum:
          - ZERO
          - ONE
      - name: repeatedStringAnnotation
        in: query
        description: Repeated string title. Repeated string description.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: nestedAnnotation.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: nestedAnnotation.ok
        in: query
        description: "DeepEnum description.\n\n - FALSE: FALSE is false.\n - TRUE:\
          \ TRUE is true."
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "FALSE"
          enum:
          - "FALSE"
          - "TRUE"
      - name: int64OverrideType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: requiredStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as required in Open API definition.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: outputOnlyStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as readonly in Open API definition.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: optionalStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
  /v1/example/a_bit_of_everything/params/post/{stringValue}:
    post:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_CheckPostQueryParams
      parameters:
      - name: stringValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: uuid
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: floatValue
        in: query
        description: Float value field
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: int64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: bytesValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: byte
      - name: uint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: enumValue
        in: query
        description: " - ZERO: ZERO means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ZERO
          enum:
          - ZERO
          - ONE
      - name: pathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ABC
          enum:
          - ABC
          - DEF
      - name: nestedPathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: GHI
          enum:
          - GHI
          - JKL
      - name: sfixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: repeatedStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: oneofString
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nonConventionalNameValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: timestampValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: repeatedEnumValue
        in: query
        description: "repeated enum value. it is comma-separated in query.\n\n - ZERO:\
          \ ZERO means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedEnumAnnotation
        in: query
        description: "Repeated numeric enum title. Repeated numeric enum description.\n\
          \n - ZERO: ZERO means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: enumValueAnnotation
        in: query
        description: "Numeric enum title. Numeric enum description.\n\n - ZERO: ZERO\
          \ means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ZERO
          enum:
          - ZERO
          - ONE
      - name: repeatedStringAnnotation
        in: query
        description: Repeated string title. Repeated string description.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: nestedAnnotation.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nestedAnnotation.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: nestedAnnotation.ok
        in: query
        description: "DeepEnum description.\n\n - FALSE: FALSE is false.\n - TRUE:\
          \ TRUE is true."
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "FALSE"
          enum:
          - "FALSE"
          - "TRUE"
      - name: int64OverrideType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: requiredStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as required in Open API definition.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: outputOnlyStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as readonly in Open API definition.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: optionalStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ABitOfEverythingNested'
          application/x-foo-mime:
            schema:
              $ref: '#/components/schemas/ABitOfEverythingNested'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v1/example/a_bit_of_everything/query/{uuid}:
    get:
      tags:
      - ABitOfEverythingService
      externalDocs:
        description: Find out more about GetQuery
        url: https://github.com/grpc-ecosystem/grpc-gateway
      operationId: ABitOfEverythingServiceABitOfEverythingService_GetQuery
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: singleNested.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: singleNested.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: singleNested.ok
        in: query
        description: "DeepEnum description.\n\n - FALSE: FALSE is false.\n - TRUE:\
          \ TRUE is true."
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "FALSE"
          enum:
          - "FALSE"
          - "TRUE"
      - name: floatValue
        in: query
        description: Float value field
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: number
          format: double
      - name: int64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: stringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: bytesValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: byte
      - name: uint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: enumValue
        in: query
        description: " - ZERO: ZERO means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ZERO
          enum:
          - ZERO
          - ONE
      - name: pathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ABC
          enum:
          - ABC
          - DEF
      - name: nestedPathEnumValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: GHI
          enum:
          - GHI
          - JKL
      - name: sfixed32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: int64
      - name: repeatedStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: oneofString
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nonConventionalNameValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: timestampValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: repeatedEnumValue
        in: query
        description: "repeated enum value. it is comma-separated in query.\n\n - ZERO:\
          \ ZERO means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: repeatedEnumAnnotation
        in: query
        description: "Repeated numeric enum title. Repeated numeric enum description.\n\
          \n - ZERO: ZERO means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: enumValueAnnotation
        in: query
        description: "Numeric enum title. Numeric enum description.\n\n - ZERO: ZERO\
          \ means 0\n - ONE: ONE means 1"
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ZERO
          enum:
          - ZERO
          - ONE
      - name: repeatedStringAnnotation
        in: query
        description: Repeated string title. Repeated string description.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: nestedAnnotation.name
        in: query
        description: name is nested field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nestedAnnotation.amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: nestedAnnotation.ok
        in: query
        description: "DeepEnum description.\n\n - FALSE: FALSE is false.\n - TRUE:\
          \ TRUE is true."
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "FALSE"
          enum:
          - "FALSE"
          - "TRUE"
      - name: int64OverrideType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: requiredStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as required in Open API definition.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: outputOnlyStringViaFieldBehaviorAnnotation
        in: query
        description: mark a field as readonly in Open API definition.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: optionalStringValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      deprecated: true
  ? /v1/example/a_bit_of_everything/{floatValue}/{doubleValue}/{int64Value}/separator/{uint64Value}/{int32Value}/{fixed64Value}/{fixed32Value}/{boolValue}/{stringValue}/{uint32Value}/{sfixed32Value}/{sfixed64Value}/{sint32Value}/{sint64Value}/{nonConventionalNameValue}/{enumValue}/{pathEnumValue}/{nestedPathEnumValue}/{enumValueAnnotation}
  : post:
      tags:
      - ABitOfEverythingService
      summary: Create a new ABitOfEverything
      description: This API creates a new ABitOfEverything
      operationId: ABitOfEverythingServiceABitOfEverythingService_Create
      parameters:
      - name: floatValue
        in: path
        description: Float value field
        required: true
        style: simple
        explode: false
        schema:
          type: number
          format: float
          default: 0.2
      - name: doubleValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
          format: double
      - name: int64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: int64
      - name: uint64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uint64
      - name: int32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: fixed64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uint64
      - name: fixed32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: boolValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: boolean
      - name: stringValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: uint32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: sfixed32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: sfixed64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: int64
      - name: sint32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: sint64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: int64
      - name: nonConventionalNameValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: enumValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - ZERO
          - ONE
      - name: pathEnumValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - ABC
          - DEF
      - name: nestedPathEnumValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - GHI
          - JKL
      - name: enumValueAnnotation
        in: path
        description: Numeric enum description.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - ZERO
          - ONE
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
  /v1/example/a_bit_of_everything/{uuid}:
    get:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_Lookup
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
    put:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_Update
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/A bit of everything'
          application/x-foo-mime:
            schema:
              $ref: '#/components/schemas/A bit of everything_1'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
    delete:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_Delete
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      security:
      - ApiKeyAuth: []
        OAuth2:
        - read
        - write
      x-irreversible: true
  ? /v1/example/a_bit_of_everything_repeated/{pathRepeatedFloatValue}/{pathRepeatedDoubleValue}/{pathRepeatedInt64Value}/{pathRepeatedUint64Value}/{pathRepeatedInt32Value}/{pathRepeatedFixed64Value}/{pathRepeatedFixed32Value}/{pathRepeatedBoolValue}/{pathRepeatedStringValue}/{pathRepeatedBytesValue}/{pathRepeatedUint32Value}/{pathRepeatedEnumValue}/{pathRepeatedSfixed32Value}/{pathRepeatedSfixed64Value}/{pathRepeatedSint32Value}/{pathRepeatedSint64Value}
  : get:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_GetRepeatedQuery
      parameters:
      - name: pathRepeatedFloatValue
        in: path
        description: repeated values. they are comma-separated in path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: number
            format: float
      - name: pathRepeatedDoubleValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: number
            format: double
      - name: pathRepeatedInt64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: int64
      - name: pathRepeatedUint64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: uint64
      - name: pathRepeatedInt32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: integer
            format: int32
      - name: pathRepeatedFixed64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: uint64
      - name: pathRepeatedFixed32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: integer
            format: int64
      - name: pathRepeatedBoolValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: boolean
      - name: pathRepeatedStringValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
      - name: pathRepeatedBytesValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            type: string
            format: byte
      - name: pathRepeatedUint32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: integer
            format: int64
      - name: pathRepeatedEnumValue
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            enum:
            - ZERO
            - ONE
      - name: pathRepeatedSfixed32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: integer
            format: int32
      - name: pathRepeatedSfixed64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: int64
      - name: pathRepeatedSint32Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: integer
            format: int32
      - name: pathRepeatedSint64Value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: int64
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverythingRepeated'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverythingRepeated'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
  /v1/example/checkStatus:
    get:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_CheckStatus
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbCheckStatusResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbCheckStatusResponse'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
  /v1/example/deep_path/{singleNested.name}:
    post:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_DeepPathEcho
      parameters:
      - name: singleNested.name
        in: path
        description: name is nested field.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/examplepbABitOfEverything'
          application/x-foo-mime:
            schema:
              $ref: '#/components/schemas/examplepbABitOfEverything'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbABitOfEverything'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v1/{book.name=publishers/*/books/*}:
    patch:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_UpdateBook
      parameters:
      - name: updateMask
        in: query
        description: The list of fields to be updated.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: allowMissing
        in: query
        description: "If set to true, and the book is not found, a new book will be\
          \ created.\nIn this situation, `update_mask` is ignored."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        description: "The book to update.\n\nThe book's `name` field is used to identify\
          \ the book to be updated.\nFormat: publishers/{publisher}/books/{book}"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/examplepbBook'
          application/x-foo-mime:
            schema:
              $ref: '#/components/schemas/examplepbBook'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbBook'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbBook'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v1/{parent=publishers/*}/books:
    post:
      tags:
      - ABitOfEverythingService
      summary: Create a book.
      operationId: ABitOfEverythingServiceABitOfEverythingService_CreateBook
      parameters:
      - name: bookId
        in: query
        description: |-
          The ID to use for the book.

          This must start with an alphanumeric character.
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: The book to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/examplepbBook'
          application/x-foo-mime:
            schema:
              $ref: '#/components/schemas/examplepbBook'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbBook'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbBook'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v2/example/a_bit_of_everything/{abe.uuid}:
    put:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_UpdateV2
      parameters:
      - name: abe.uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: updateMask
        in: query
        description: The paths to update.
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/examplepbABitOfEverything'
          application/x-foo-mime:
            schema:
              $ref: '#/components/schemas/examplepbABitOfEverything'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
    patch:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_UpdateV22
      parameters:
      - name: abe.uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: updateMask
        in: query
        description: The paths to update.
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/examplepbABitOfEverything'
          application/x-foo-mime:
            schema:
              $ref: '#/components/schemas/examplepbABitOfEverything'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v2/example/echo:
    get:
      tags:
      - echo rpc
      summary: "Summary: Echo rpc"
      description: Description Echo
      externalDocs:
        description: Find out more Echo
        url: https://github.com/grpc-ecosystem/grpc-gateway
      operationId: echo rpcABitOfEverythingService_Echo3
      parameters:
      - name: value
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subStringMessage'
              example:
                value: the input value
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/subStringMessage'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: integer
                format: integer
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: integer
                format: integer
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        "503":
          description: Returned when the resource is temporarily unavailable.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
          x-number: 100
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
    post:
      tags:
      - echo rpc
      summary: "Summary: Echo rpc"
      description: Description Echo
      externalDocs:
        description: Find out more Echo
        url: https://github.com/grpc-ecosystem/grpc-gateway
      operationId: echo rpcABitOfEverythingService_Echo2
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/x-foo-mime:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subStringMessage'
              example:
                value: the input value
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/subStringMessage'
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: integer
                format: integer
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: integer
                format: integer
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        "503":
          description: Returned when the resource is temporarily unavailable.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
          x-number: 100
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v2/example/empty:
    get:
      tags:
      - camelCaseServiceName
      operationId: camelCaseServiceNamecamelCaseServiceName_Empty
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
  /v2/example/errorwithdetails:
    get:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_ErrorWithDetails
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
  /v2/example/overwriteresponsecontenttype:
    get:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_OverwriteResponseContentType
      responses:
        "200":
          description: A successful response.
          content:
            application/text:
              schema:
                type: string
                x-content-type: application/text
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/text:
              schema:
                type: object
                x-content-type: application/text
        "404":
          description: Returned when the resource does not exist.
          content:
            application/text:
              schema:
                type: string
                format: string
                x-content-type: application/text
        "418":
          description: I'm a teapot.
          content:
            application/text:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/text:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/text:
              schema:
                $ref: '#/components/schemas/rpcStatus'
  /v2/example/postwithemptybody/{name}:
    post:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_PostWithEmptyBody
      parameters:
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
          application/x-foo-mime:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v2/example/timeout:
    get:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_Timeout
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
  /v2/example/withbody/{id}:
    post:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_GetMessageWithBody
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/examplepbBody'
          application/x-foo-mime:
            schema:
              $ref: '#/components/schemas/examplepbBody'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v2/{value}:check:
    get:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_CheckExternalPathEnum
      parameters:
      - name: value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - ABC
          - DEF
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
  /v2a/example/a_bit_of_everything/{abe.uuid}:
    patch:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_UpdateV23
      parameters:
      - name: abe.uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/examplepbUpdateV2Request'
          application/x-foo-mime:
            schema:
              $ref: '#/components/schemas/examplepbUpdateV2Request'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v3/{value}:check:
    get:
      tags:
      - ABitOfEverythingService
      operationId: ABitOfEverythingServiceABitOfEverythingService_CheckExternalNestedPathEnum
      parameters:
      - name: value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - GHI
          - JKL
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: object
        "404":
          description: Returned when the resource does not exist.
          content:
            application/json:
              schema:
                type: string
                format: string
                x-content-type: application/json
            application/x-foo-mime:
              schema:
                type: string
                format: string
        "418":
          description: I'm a teapot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbNumericEnum'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/examplepbErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
            application/x-foo-mime:
              schema:
                $ref: '#/components/schemas/rpcStatus'
components:
  schemas:
    A bit of everything_1:
      title: A bit of everything
      required:
      - doubleValue
      - floatValue
      - int64Value
      - requiredStringViaFieldBehaviorAnnotation
      type: object
      properties:
        singleNested:
          $ref: '#/components/schemas/ABitOfEverythingNested'
        nested:
          type: array
          items:
            $ref: '#/components/schemas/ABitOfEverythingNested'
        floatValue:
          type: number
          description: Float value field
          format: float
          default: 0.2
        doubleValue:
          type: number
          format: double
        int64Value:
          type: string
          format: int64
        uint64Value:
          type: string
          format: uint64
        int32Value:
          type: integer
          format: int32
        fixed64Value:
          type: string
          format: uint64
        fixed32Value:
          type: integer
          format: int64
        boolValue:
          type: boolean
        stringValue:
          type: string
        bytesValue:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        uint32Value:
          type: integer
          format: int64
        enumValue:
          $ref: '#/components/schemas/examplepbNumericEnum'
        pathEnumValue:
          $ref: '#/components/schemas/pathenumPathEnum'
        nestedPathEnumValue:
          $ref: '#/components/schemas/MessagePathEnumNestedPathEnum'
        sfixed32Value:
          type: integer
          format: int32
        sfixed64Value:
          type: string
          format: int64
        sint32Value:
          type: integer
          format: int32
        sint64Value:
          type: string
          format: int64
        repeatedStringValue:
          type: array
          items:
            type: string
        oneofEmpty:
          type: object
          properties: {}
        oneofString:
          type: string
        mapValue:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/examplepbNumericEnum'
        mappedStringValue:
          type: object
          additionalProperties:
            type: string
        mappedNestedValue:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ABitOfEverythingNested'
        nonConventionalNameValue:
          type: string
        timestampValue:
          type: string
          format: date-time
        repeatedEnumValue:
          title: repeated enum value. it is comma-separated in query
          type: array
          items:
            $ref: '#/components/schemas/examplepbNumericEnum'
        repeatedEnumAnnotation:
          title: Repeated numeric enum title
          type: array
          description: Repeated numeric enum description.
          items:
            $ref: '#/components/schemas/examplepbNumericEnum'
        enumValueAnnotation:
          $ref: '#/components/schemas/examplepbNumericEnum'
        repeatedStringAnnotation:
          title: Repeated string title
          type: array
          description: Repeated string description.
          items:
            type: string
        repeatedNestedAnnotation:
          title: Repeated nested object title
          type: array
          description: Repeated nested object description.
          items:
            $ref: '#/components/schemas/ABitOfEverythingNested'
        nestedAnnotation:
          $ref: '#/components/schemas/ABitOfEverythingNested'
        int64OverrideType:
          type: integer
          format: int64
        requiredStringViaFieldBehaviorAnnotation:
          title: mark a field as required in Open API definition
          type: string
        outputOnlyStringViaFieldBehaviorAnnotation:
          title: mark a field as readonly in Open API definition
          type: string
          readOnly: true
        optionalStringValue:
          type: string
      description: Intentionaly complicated message type to cover many features of
        Protobuf.
      example:
        int64_value: 12
        double_value: 12.3
      externalDocs:
        description: Find out more about ABitOfEverything
        url: https://github.com/grpc-ecosystem/grpc-gateway
    A bit of everything:
      title: A bit of everything
      required:
      - doubleValue
      - floatValue
      - int64Value
      - requiredStringViaFieldBehaviorAnnotation
      type: object
      properties:
        singleNested:
          $ref: '#/components/schemas/ABitOfEverythingNested'
        nested:
          type: array
          items:
            $ref: '#/components/schemas/ABitOfEverythingNested'
        floatValue:
          type: number
          description: Float value field
          format: float
          default: 0.2
        doubleValue:
          type: number
          format: double
        int64Value:
          type: string
          format: int64
        uint64Value:
          type: string
          format: uint64
        int32Value:
          type: integer
          format: int32
        fixed64Value:
          type: string
          format: uint64
        fixed32Value:
          type: integer
          format: int64
        boolValue:
          type: boolean
        stringValue:
          type: string
        bytesValue:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        uint32Value:
          type: integer
          format: int64
        enumValue:
          $ref: '#/components/schemas/examplepbNumericEnum'
        pathEnumValue:
          $ref: '#/components/schemas/pathenumPathEnum'
        nestedPathEnumValue:
          $ref: '#/components/schemas/MessagePathEnumNestedPathEnum'
        sfixed32Value:
          type: integer
          format: int32
        sfixed64Value:
          type: string
          format: int64
        sint32Value:
          type: integer
          format: int32
        sint64Value:
          type: string
          format: int64
        repeatedStringValue:
          type: array
          items:
            type: string
        oneofEmpty:
          type: object
          properties: {}
        oneofString:
          type: string
        mapValue:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/examplepbNumericEnum'
        mappedStringValue:
          type: object
          additionalProperties:
            type: string
        mappedNestedValue:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ABitOfEverythingNested'
        nonConventionalNameValue:
          type: string
        timestampValue:
          type: string
          format: date-time
        repeatedEnumValue:
          title: repeated enum value. it is comma-separated in query
          type: array
          items:
            $ref: '#/components/schemas/examplepbNumericEnum'
        repeatedEnumAnnotation:
          title: Repeated numeric enum title
          type: array
          description: Repeated numeric enum description.
          items:
            $ref: '#/components/schemas/examplepbNumericEnum'
        enumValueAnnotation:
          $ref: '#/components/schemas/examplepbNumericEnum'
        repeatedStringAnnotation:
          title: Repeated string title
          type: array
          description: Repeated string description.
          items:
            type: string
        repeatedNestedAnnotation:
          title: Repeated nested object title
          type: array
          description: Repeated nested object description.
          items:
            $ref: '#/components/schemas/ABitOfEverythingNested'
        nestedAnnotation:
          $ref: '#/components/schemas/ABitOfEverythingNested'
        int64OverrideType:
          type: integer
          format: int64
        requiredStringViaFieldBehaviorAnnotation:
          title: mark a field as required in Open API definition
          type: string
        outputOnlyStringViaFieldBehaviorAnnotation:
          title: mark a field as readonly in Open API definition
          type: string
          readOnly: true
        optionalStringValue:
          type: string
      description: Intentionaly complicated message type to cover many features of
        Protobuf.
      example:
        int64_value: 12
        double_value: 12.3
      externalDocs:
        description: Find out more about ABitOfEverything
        url: https://github.com/grpc-ecosystem/grpc-gateway
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header
      x-amazon-apigateway-authorizer:
        authorizerResultTtlInSeconds: 60
        type: token
      x-amazon-apigateway-authtype: oauth2
    BasicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            admin: Grants read and write access to administrative information
            read: Grants read access
            write: Grants write access
x-grpc-gateway-baz-list:
- one
- true
x-grpc-gateway-foo: bar
x-original-swagger-version: "2.0"
